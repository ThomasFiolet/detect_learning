im = cv2.adaptiveThreshold((im*255).astype(np.uint8),255,cv2.ADAPTIVE_THRESH_MEAN_C,cv2.THRESH_BINARY,11,2)
im = cv2.adaptiveThreshold((im*255).astype(np.uint8),255,cv2.ADAPTIVE_THRESH_GAUSSIAN_C,cv2.THRESH_BINARY,11,2)
th, im = cv2.threshold((im*255).astype(np.uint8),0,255,cv2.THRESH_BINARY+cv2.THRESH_OTSU)
im = cv2.bilateralFilter(im,9,75,75)
im = cv2.erode(im,np.ones((5,5),np.uint8),iterations = 1)
im = cv2.dilate(im,np.ones((5,5),np.uint8),iterations = 1)
im = cv2.Laplacian((im*255).astype(np.uint8),cv2.CV_8U)
im = cv2.Sobel(im, -1, 0, 1, ksize=9)
im = cv2.Canny((im*255).astype(np.uint8),100,200)
im = cv2.equalizeHist((im*255).astype(np.uint8))
im = clahe.apply((im*255).astype(np.uint8))
im = cv2.convertScaleAbs(im, alpha=1, beta=0.5)
sucess, im = saliency.computeSaliency(im)